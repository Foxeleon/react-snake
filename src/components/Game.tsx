import React, { useEffect, useState, useRef } from 'react';
import { GameBoard } from './GameBoard';
import { GameSettings } from './GameSettings';
import { useGameStore } from '@/store/gameStore';
import Legend from './Legend';
import styles from './Game.module.css';
import desktopStyles from './DesktopGameControls.module.css';
import { usePlatform } from '@/hooks/usePlatform.ts';
import { useTranslation } from 'react-i18next';

const Game: React.FC = () => {
  const { t } = useTranslation();
  const {
    isPlaying,
    isGameOver,
    score,
    startGame,
    isPaused,
    pauseGame,
    resumeGame,
    resetGame,
    isSettingsOpen,
    showLegend,
    settings,
    loadSettings,
    toggleSettings,
    toggleLegend,
    doublePointsActive,
    doublePointsEndTime,
    changeDirection,
    pausedDoublePointsTimeLeft
  } = useGameStore();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  const [isMobile, setIsMobile] = useState(false);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —É–¥–≤–æ–µ–Ω–∏—è –æ—á–∫–æ–≤
  const pauseStartTimeRef = useRef<number | null>(null);
  const pauseTotalDurationRef = useRef<number>(0);
  const { isNative } = usePlatform();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ isMobile –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    checkIfMobile();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', checkIfMobile);

    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      window.removeEventListener('resize', checkIfMobile);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadSettings();
  }, [loadSettings]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—É–∑—ã
  useEffect(() => {
    if (isPaused && isPlaying && !pauseStartTimeRef.current) {
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—É–∑—ã
      pauseStartTimeRef.current = Date.now();
    } else if (!isPaused && pauseStartTimeRef.current) {
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const pauseDuration = Date.now() - pauseStartTimeRef.current;
      pauseTotalDurationRef.current += pauseDuration;
      pauseStartTimeRef.current = null;
    }
  }, [isPaused, isPlaying]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  const handleStartGame = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–∞—É–∑—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    pauseStartTimeRef.current = null;
    pauseTotalDurationRef.current = 0;
    startGame();
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  const [timeLeft, setTimeLeft] = useState<number>(0); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 0

  useEffect(() => {
    let intervalId: number | null = null;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É !isGameOver
    if (doublePointsActive && doublePointsEndTime && !isPaused && !isGameOver) {
      intervalId = window.setInterval(() => {
        const currentTime = Date.now();
        const timeLeft = doublePointsEndTime - currentTime;

        setTimeLeft(timeLeft > 0 ? Math.floor(timeLeft / 1000) : 0);

        if (timeLeft <= 0) {
          clearInterval(intervalId!);
          setTimeLeft(0);
        }
      }, 100);
    } else if (isPaused && pausedDoublePointsTimeLeft !== null) {
      setTimeLeft(Math.floor(pausedDoublePointsTimeLeft / 1000));
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
    } else if (isGameOver) {
      setTimeLeft(0);
    }

    return () => {
      if (intervalId !== null) {
        clearInterval(intervalId);
      }
    };
  }, [doublePointsActive, doublePointsEndTime, isPaused, pausedDoublePointsTimeLeft, isGameOver]); // –î–æ–±–∞–≤–ª—è–µ–º isGameOver –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏



  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const containerClasses = `${styles.gameContainer} ${styles[settings.environment]} ${settings.theme === 'dark' ? styles.dark : ''} ${isNative ? styles.gameContainerNative : ''}`;

  // –†–µ–Ω–¥–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É–¥–≤–æ–µ–Ω–∏—è –æ—á–∫–æ–≤
  const renderDoublePointsIndicator = () => {
    if (!doublePointsActive) return null;

    if (isMobile) {
      return (
          <div className={styles.mobileDoublePointsIndicator}>
            {t('game.doublePoints.mobile', { seconds: timeLeft })}
          </div>
      );
    }

    return (
        <div className={styles.doublePointsIndicator}>
          {t('game.doublePoints.desktop', { seconds: timeLeft })}
        </div>
    );
  };

  // –ö–ª–∞—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
  const themeClass = settings.theme === 'dark' ? styles.dark : '';

  return (
      <div className={containerClasses}>
        <div className={styles.header}>
          <h1 className={styles.gameTitle}>üêç{t('game.gameTitle')}</h1>
          <div className={styles.headerButtons}>
            <button onClick={toggleSettings} className={styles.iconButton} title={t('game.buttons.settings')}>
              ‚öôÔ∏è
            </button>
            {/* TODO fix records
            <button onClick={toggleRecords} className={styles.iconButton} title={t('game.buttons.records')}>
              üèÜ
            </button>
            */}
            <button
                onClick={toggleLegend}
                className={`${styles.iconButton} ${showLegend ? styles.active : ''}`}
                title={showLegend ? t('game.buttons.hideLegend') : t('game.buttons.showLegend')}
            >
              ‚ÑπÔ∏è
            </button>
          </div>
        </div>

        <div className={styles.boardBackground}>
          {/* –ü–∞–Ω–µ–ª—å —Å –æ–±—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π */}
          <div className={styles.gameTopPanel}>
            <div className={styles.scoreIndicator}>
              {t('game.score', { score })}
            </div>

            {/* –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É–¥–≤–æ–µ–Ω–∏—è –æ—á–∫–æ–≤ */}
            <div className={styles.doublePointsContainer}>
              {renderDoublePointsIndicator()}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ */}
            {isMobile && (
                <div className={styles.mobileGameButtons}>
                  {!isPlaying && !isGameOver && (
                      <button
                          onClick={handleStartGame}
                          className={styles.mobileStartButton}
                      >
                        {t('game.start')}
                      </button>
                  )}

                  {isPlaying && !isGameOver && (
                      <button
                          onClick={isPaused ? resumeGame : pauseGame}
                          className={styles.mobilePauseButton}
                      >
                        {isPaused ? t('game.resume') : t('game.pause')}
                      </button>
                  )}

                  {isGameOver && (
                      <button
                          onClick={resetGame}
                          className={styles.mobileStartButton}
                      >
                        {t('game.restart')}
                      </button>
                  )}
                </div>
            )}
          </div>
          <GameBoard/>
        </div>

        {!(isMobile || isNative) && (
            <div className={`${desktopStyles.controls} ${themeClass}`}>
              {!isPlaying && !isGameOver && (
                  <button
                      onClick={handleStartGame}
                      className={desktopStyles.startButton}
                      data-testid="start-button"
                  >
                    {t('game.start')}
                  </button>
              )}

              {isPlaying && !isGameOver && (
                  <button
                      onClick={isPaused ? resumeGame : pauseGame}
                      className={desktopStyles.pauseButton}
                  >
                    {isPaused ? t('game.resume') : t('game.pause')}
                  </button>
              )}

              {isGameOver && (
                  <div className={desktopStyles.gameOverControls}>
                    <h2>{t('game.gameOver')}</h2>
                    <div className={desktopStyles.buttonGroup}>
                      <button onClick={resetGame}>{t('game.restart')}</button>
                    </div>
                  </div>
              )}

              <div className={desktopStyles.instructions}>
                <p>{t('game.controls.arrows')}</p>
              </div>
            </div>
        )}


        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        {(isMobile || isNative) && settings.showMobileControls && (
            <div className={styles.mobileControls}>
              <div className={styles.mobileControlButtons}>
                <button
                    className={styles.mobileControlButton}
                    data-direction="UP"
                    onClick={() => changeDirection('UP')}
                >
                  ‚¨ÜÔ∏è
                </button>
                <button
                    className={styles.mobileControlButton}
                    data-direction="LEFT"
                    onClick={() => changeDirection('LEFT')}
                >
                  ‚¨ÖÔ∏è
                </button>
                <button
                    className={styles.mobileControlButton}
                    data-direction="RIGHT"
                    onClick={() => changeDirection('RIGHT')}
                >
                  ‚û°Ô∏è
                </button>
                <button
                    className={styles.mobileControlButton}
                    data-direction="DOWN"
                    onClick={() => changeDirection('DOWN')}
                >
                  ‚¨áÔ∏è
                </button>
              </div>
            </div>
        )}

        {isSettingsOpen && <GameSettings/>}
        {/* TODO fix records
          {isRecordsOpen && <Leaderboard/>}
        */}
        {showLegend && <Legend/>}
      </div>
  );
};

export default Game;